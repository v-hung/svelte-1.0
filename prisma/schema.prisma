// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  // sessions      Session[]

  messages Messages[]
  rooms    Rooms[]
  // RoomsOnUsers  RoomsOnUsers[]
}

model Admin {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Product {
//   id            String    @id @default(cuid())
// }

model Quizzes {
  id        String   @id @default(cuid())
  title     String
  slug      String
  work_time DateTime

  passages Passages[]
}

model Passages {
  id      String @id @default(cuid())
  title   String
  content String @db.Text

  quiz_id String
  quiz    Quizzes @relation(fields: [quiz_id], references: [id])

  group_questions GroupQuestions[]
}

model GroupQuestions {
  id      String @id @default(cuid())
  type    String
  title   String
  options Json?

  image_id String?
  image    Images? @relation(fields: [image_id], references: [id])

  passage_id String
  passage    Passages @relation(fields: [passage_id], references: [id])

  questions Questions[]
}

model Questions {
  id String @id @default(cuid())

  question_name String?
  option_a      String?
  option_b      String?
  option_c      String?
  option_d      String?

  group_question_id String
  group_quesstion   GroupQuestions @relation(fields: [group_question_id], references: [id])

  answer Answers?
}

model Answers {
  id          String @id @default(cuid())
  answer_name String

  question_id String    @unique
  question    Questions @relation(fields: [question_id], references: [id])
}

// messages
model Rooms {
  id String @id @default(cuid())

  messages Messages[]
  // RoomsOnUsers RoomsOnUsers[]
  users    User[]
}

// model RoomsOnUsers {
//   roomId String
//   room   Rooms  @relation(fields: [roomId], references: [id])
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   @@id([roomId, userId])
// }

model Messages {
  id       String  @id @default(cuid())
  senderID String
  sender   User    @relation(fields: [senderID], references: [id])
  isRead   Boolean @default(false)
  body     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomId String
  room   Rooms  @relation(fields: [roomId], references: [id])
}

model Images {
  id      String @id @default(cuid())
  name    String
  type    String
  caption String
  url     String
  width   Int
  height  Int
  size    Float  @db.Double

  group_quesstion GroupQuestions[]
}

// https://tuhocielts.dolenglish.vn/luyen-thi-ielts/ielts-online-test-luyen-tap-cambridge-ielts-16-test-4-reading
